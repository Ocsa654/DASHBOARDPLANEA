import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import os
import numpy as np

# Configuraci칩n de la p치gina
st.set_page_config(
    page_title="Dashboard PLANEA KPIs",
    page_icon="游늵",
    layout="wide"
)

# T칤tulo principal
st.title("Dashboard PLANEA - Indicadores Clave")
st.markdown("---")

# Funci칩n para normalizar nombres de columnas
def normalizar_columnas(df):
    rename_dict = {}
    for col in df.columns:
        # Crear versi칩n normalizada (sin acentos)
        new_col = col
        for a, b in [('츼', 'A'), ('칄', 'E'), ('칈', 'I'), ('칍', 'O'), ('칔', 'U'),
                    ('치', 'a'), ('칠', 'e'), ('칤', 'i'), ('칩', 'o'), ('칰', 'u'),
                    ('칌', 'N'), ('침', 'n')]:
            new_col = new_col.replace(a, b)
        
        if new_col != col:
            rename_dict[col] = new_col
    
    if rename_dict:
        return df.rename(columns=rename_dict)
    return df

# Funciones auxiliares para calcular KPIs
def calcular_porcentaje_satisfactorio(df, tipo="LENGUAJE"):
    """Calcula el porcentaje de estudiantes en niveles satisfactorios (III y IV)"""
    # Buscar columnas de nivel III y IV para el tipo especificado (lenguaje o matem치ticas)
    nivel3_col = None
    nivel4_col = None
    
    if tipo == "LENGUAJE":
        for col in df.columns:
            if ("LENGUAJE" in col or "COMUNICACION" in col) and "NIVEL III" in col and "%" in col:
                nivel3_col = col
            elif ("LENGUAJE" in col or "COMUNICACION" in col) and "NIVEL IV" in col and "%" in col:
                nivel4_col = col
    else:  # MATEMATICAS
        for col in df.columns:
            if ("MATEMATICAS" in col or "MATEM츼TICAS" in col) and "NIVEL III" in col and "%" in col:
                nivel3_col = col
            elif ("MATEMATICAS" in col or "MATEM츼TICAS" in col) and "NIVEL IV" in col and "%" in col:
                nivel4_col = col
    
    # Si encontramos ambas columnas, calcular el promedio
    if nivel3_col and nivel4_col:
        return df[nivel3_col].mean() + df[nivel4_col].mean()
    
    return 0  # Valor por defecto si no encontramos las columnas

def obtener_mejor_estado(df, tipo="LENGUAJE"):
    """Obtiene el estado con mejor desempe침o"""
    resultados = []
    
    # Buscar columna de entidad
    entidad_col = None
    for col in ['ENTIDAD', 'ESTADO', 'ENTIDAD FEDERATIVA']:
        if col in df.columns:
            entidad_col = col
            break
    
    if not entidad_col:
        return {"estado": "Desconocido", "valor": 0}
    
    # Agrupar por entidad y calcular porcentaje satisfactorio
    for entidad in df[entidad_col].unique():
        df_entidad = df[df[entidad_col] == entidad]
        valor = calcular_porcentaje_satisfactorio(df_entidad, tipo)
        resultados.append({"estado": entidad, "valor": valor})
    
    # Ordenar y obtener el mejor
    resultados = sorted(resultados, key=lambda x: x["valor"], reverse=True)
    
    if resultados:
        return resultados[0]
    
    return {"estado": "Desconocido", "valor": 0}

def obtener_peor_estado(df, tipo="LENGUAJE"):
    """Obtiene el estado con peor desempe침o"""
    resultados = []
    
    # Buscar columna de entidad
    entidad_col = None
    for col in ['ENTIDAD', 'ESTADO', 'ENTIDAD FEDERATIVA']:
        if col in df.columns:
            entidad_col = col
            break
    
    if not entidad_col:
        return {"estado": "Desconocido", "valor": 0}
    
    # Agrupar por entidad y calcular porcentaje satisfactorio
    for entidad in df[entidad_col].unique():
        df_entidad = df[df[entidad_col] == entidad]
        valor = calcular_porcentaje_satisfactorio(df_entidad, tipo)
        resultados.append({"estado": entidad, "valor": valor})
    
    # Ordenar y obtener el peor
    resultados = sorted(resultados, key=lambda x: x["valor"])
    
    if resultados:
        return resultados[0]
    
    return {"estado": "Desconocido", "valor": 0}

def calcular_tendencia(df_list, a침os, tipo="LENGUAJE"):
    """Calcula la tendencia a lo largo de los a침os"""
    if not df_list or not a침os or len(df_list) != len(a침os):
        return 0
    
    valores = []
    for df in df_list:
        valores.append(calcular_porcentaje_satisfactorio(df, tipo))
    
    # Si solo tenemos un a침o, no podemos calcular tendencia
    if len(valores) <= 1:
        return 0
    
    # Calcular pendiente usando regresi칩n lineal simple
    x = np.array(a침os)
    y = np.array(valores)
    
    # Evitar divisi칩n por cero
    if np.var(x) == 0:
        return 0
    
    # Pendiente de la regresi칩n lineal
    pendiente = np.cov(x, y)[0, 1] / np.var(x)
    return pendiente

# Estado de carga y selecci칩n
if 'df_2015' not in st.session_state:
    st.session_state.df_2015 = None
    st.session_state.df_2016 = None
    st.session_state.df_2017 = None
    st.session_state.df_2022 = None
    st.session_state.carga_completa = False

# Sidebar para opciones de carga
st.sidebar.header("Opciones de carga")
max_filas = st.sidebar.slider("N칰mero m치ximo de filas a cargar", 100, 5000, 500, step=100)
cargar_todo = st.sidebar.checkbox("Cargar datos completos (puede tardar)", value=False)

# Funci칩n para cargar datos por a침o
def cargar_datos_por_a침o(archivo, a침o, max_filas=500):
    try:
        with st.spinner(f'Cargando datos {a침o}...'):
            df = pd.read_excel(archivo, nrows=max_filas)
            df = normalizar_columnas(df)
            
            # Filtrar por a침o si es necesario
            a침o_col = None
            for col in ['ANO', 'ANIO', 'A칌O', 'A?O', 'YEAR']:
                if col in df.columns:
                    a침o_col = col
                    break
            
            if a침o_col and a침o:
                df = df[df[a침o_col] == a침o]
            
            return df
    except Exception as e:
        st.error(f"Error al cargar datos {a침o}: {str(e)}")
        return None

# Cargar datos cuando se activa la opci칩n
if cargar_todo and not st.session_state.carga_completa:
    # Cargar datos 2015-2017
    st.session_state.df_2015 = cargar_datos_por_a침o('DATOS2015-2017.xlsx', 2015, max_filas)
    st.session_state.df_2016 = cargar_datos_por_a침o('DATOS2015-2017.xlsx', 2016, max_filas)
    st.session_state.df_2017 = cargar_datos_por_a침o('DATOS2015-2017.xlsx', 2017, max_filas)
    
    # Cargar datos 2022
    st.session_state.df_2022 = cargar_datos_por_a침o('DATOS2022.xlsx', None, max_filas)
    
    st.session_state.carga_completa = True
    st.success("Datos cargados correctamente")

# Verificar si se han cargado los datos
if not st.session_state.carga_completa:
    st.warning("Para ver los KPIs, activa la opci칩n 'Cargar datos completos' en la barra lateral.")
    st.stop()

# Obtener los dataframes cargados
df_2015 = st.session_state.df_2015
df_2016 = st.session_state.df_2016
df_2017 = st.session_state.df_2017
df_2022 = st.session_state.df_2022

# Aqu칤 continuaremos con la implementaci칩n de los KPIs en las siguientes partes
